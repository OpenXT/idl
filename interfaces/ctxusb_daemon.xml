<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0" name="/">
  <!--~~~~~~~~~~~~~~~~~~~~~~
  ~~~~  DBus Interface  ~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~-->
  <interface name="com.citrix.xenclient.usbdaemon">
    <tp:docstring>Interface to the USB policy daemon.</tp:docstring>
    <!--~~~~~~~~~~~~~~~~~~~~~~
    ~~~~  DBus Methods    ~~~~
    ~~~~~~~~~~~~~~~~~~~~~~~-->
    <method name="assign_device">
      <tp:docstring>Assign a device to a VM.</tp:docstring>
      <arg name="dev_id" type="i" direction="in">
        <tp:docstring>id of device to assign</tp:docstring>
      </arg>
      <arg name="vm_uuid" type="s" direction="in">
        <tp:docstring>UUID of VM to assign device to.</tp:docstring>
      </arg>
    </method>
    <method name="get_device_info">
      <tp:docstring><p>Connection states are defined as follows:</p>
		<ul>
		<li>-1  Cannot find device</li>
		<li>0  Device not in use by any VM</li>
		<li>1  Assigned to another VM which is off</li>
		<li>2  Assigned to another VM which is running</li>
		<li>3  Blocked by policy for specified VM</li>
		<li>4  In use by specified VM</li>
		<li>5  In use by specified VM and flagged "sticky"</li>
		<li>6  Flagged as "sticky" assigned to specified VM, but not currently in use</li>
		<li>7  Special platform device, listed purely for information</li>
		<li>8  HiD device in use by dom0</li>
		<li>9  HiD device in use by dom0, but "sticky" assigned to an off VM</li>
		<li>10 External CD drive in use by dom0</li>
		<li>11 External CD drive in use by dom0, but "sticky" assigned to an off VM</li>
		</ul>
		</tp:docstring>
      <arg name="dev_id" type="i" direction="in">
        <tp:docstring>ID of device to query.</tp:docstring>
      </arg>
      <arg name="vm_uuid" type="s" direction="in">
        <tp:docstring>UUID of VM to get information relative to.</tp:docstring>
      </arg>
      <arg name="name" type="s" direction="out">
        <tp:docstring>Name of device.</tp:docstring>
      </arg>
      <arg name="state" type="i" direction="out">
        <tp:docstring>Connection state of device.</tp:docstring>
      </arg>
      <arg name="vm_assigned" type="s" direction="out">
        <tp:docstring>UUID of VM device is assigned to (if any).</tp:docstring>
      </arg>
      <arg name="detail" type="s" direction="out">
        <tp:docstring>Name detail, for mouse-over text.</tp:docstring>
      </arg>
    </method>
    <method name="list_devices">
      <tp:docstring>Enumerate the USB devices plugged into the system.</tp:docstring>
      <arg name="devices" type="ai" direction="out">
        <tp:docstring>List of IDs of devices in the system.</tp:docstring>
      </arg>
    </method>
    <method name="name_device">
      <tp:docstring>Set the user visible name for a device.</tp:docstring>
      <arg name="dev_id" type="i" direction="in">
        <tp:docstring>ID of device to set name for.</tp:docstring>
      </arg>
      <arg name="name" type="s" direction="in">
        <tp:docstring>name to set for device</tp:docstring>
      </arg>
    </method>
    <method name="new_vm">
      <tp:docstring>Tell daemon a new VM has been started.</tp:docstring>
      <arg name="dom_id" type="i" direction="in">
        <tp:docstring>ID of newly started VM.</tp:docstring>
      </arg>
    </method>
    <method name="policy_get_rule">
      <tp:docstring>Get a specific USB rule</tp:docstring>
      <arg name="rule_id" type="i" direction="in">
        <tp:docstring>Index position of the rule to get</tp:docstring>
      </arg>
      <arg name="command" type="s" direction="out">
        <tp:docstring>Command string of {allow, always, default, deny}</tp:docstring>
      </arg>
      <arg name="description" type="s" direction="out">
        <tp:docstring>Description of the policy rule</tp:docstring>
      </arg>
      <arg name="vendor_id" type="s" direction="out">
        <tp:docstring>USB vendor ID as hexadecimal, parsed by strtol (e.g. 8086)</tp:docstring>
      </arg>
      <arg name="device_id" type="s" direction="out">
        <tp:docstring>USB product ID as hexadecimal, parsed by strtol (e.g. 1a2c)</tp:docstring>
      </arg>
      <arg name="serial_number" type="s" direction="out">
        <tp:docstring>Serial number of the device, or an empty string to match any</tp:docstring>
      </arg>
      <arg name="sysattrs" type="a{ss}" direction="out">
        <tp:docstring>Dict of String:String sysattributes</tp:docstring>
      </arg>
      <arg name="udev_properties" type="a{ss}" direction="out">
        <tp:docstring>Dict of String:String udev properties</tp:docstring>
      </arg>
      <arg name="vm_uuid" type="s" direction="out">
        <tp:docstring>VM UUID, or an empty string to match any VM</tp:docstring>
      </arg>
    </method>
    <method name="policy_get_rules">
      <tp:docstring>Get a set of all USB rules</tp:docstring>
      <arg name="rule_set" type="a(isssssa{ss}a{ss}s)" direction="out">
        <tp:docstring>The set of rules in the format as an array of structs of:<p/>
          <ol>
            <li>Rule ID</li>
            <li>Command</li>
            <li>Description</li>
            <li>Vendor ID as a String interpretable by strtol (e.g. 8086). An empty string or 0 indicates to match any device.</li>
            <li>Device ID/Product ID as a String interpretable by strtol (e.g. 8086). An empty string or 0 indicates to match any device.</li>
            <li>Serial number of device. An empty string indicates to ignore serial number (match any).</li>
            <li>Dict of String:String sysattibutes</li>
            <li>Dict of String:String udev properties</li>
            <li>VM UUID, or an empty string to match any VM</li>
          </ol>
        </tp:docstring>
      </arg>
    </method>
    <method name="policy_list">
      <tp:docstring>Get all USB rule IDs</tp:docstring>
      <arg name="rules" type="ai" direction="out">
        <tp:docstring>Array of the policy IDs for USB rules</tp:docstring>
      </arg>
    </method>
    <method name="policy_remove_rule">
      <tp:docstring>Remove a specific USB rule</tp:docstring>
      <arg name="rule_id" type="i" direction="in">
        <tp:docstring>ID of the rule to remove</tp:docstring>
      </arg>
    </method>
    <method name="policy_set_rule">
      <tp:docstring>Set or create a specific USB rule</tp:docstring>
      <arg name="rule_id" type="i" direction="in">
        <tp:docstring>ID of the rule. If a rule exists with the ID, it will be replaced.</tp:docstring>
      </arg>
      <arg name="command" type="s" direction="in">
        <tp:docstring>Command string of {allow, always, default, deny}</tp:docstring>
      </arg>
      <arg name="description" type="s" direction="in">
        <tp:docstring>Description of the policy rule</tp:docstring>
      </arg>
      <arg name="vendor_id" type="s" direction="in">
        <tp:docstring>USB vendor ID as headecimal, parsed by strtol (e.g. 8086)</tp:docstring>
      </arg>
      <arg name="device_id" type="s" direction="in">
        <tp:docstring>USB product ID as hexadecimal, parsed by strtol (e.g. 1a2c)</tp:docstring>
      </arg>
      <arg name="serial_number" type="s" direction="in">
        <tp:docstring>Serial number of the device, or an empty string to match any</tp:docstring>
      </arg>
      <arg name="sysattrs" type="a{ss}" direction="in">
        <tp:docstring>Dict of String:String sysattributes</tp:docstring>
      </arg>
      <arg name="udev_properties" type="a{ss}" direction="in">
        <tp:docstring>Dict of String:String udev properties</tp:docstring>
      </arg>
      <arg name="vm_uuid" type="s" direction="in">
        <tp:docstring>VM UUID, or an empty string to match any VM</tp:docstring>
      </arg>
    </method>
    <method name="policy_set_rule_advanced">
      <tp:docstring>Set or create a specific USB rule, an advanced interface wrapper around <i>policy_set_rule</i></tp:docstring>
      <arg name="rule_id" type="i" direction="in">
        <tp:docstring>ID of the rule. If a rule exists with the ID, it will be replaced.</tp:docstring>
      </arg>
      <arg name="command" type="s" direction="in">
        <tp:docstring>Command string of {allow, always, default, deny}</tp:docstring>
      </arg>
      <arg name="description" type="s" direction="in">
        <tp:docstring>Description of the policy rule</tp:docstring>
      </arg>
      <arg name="sysattrs" type="a{ss}" direction="in">
        <tp:docstring>Dict of String:String sysattributes</tp:docstring>
      </arg>
      <arg name="udev_properties" type="a{ss}" direction="in">
        <tp:docstring>Dict of String:String udev properties</tp:docstring>
      </arg>
      <arg name="vm_uuid" type="s" direction="in">
        <tp:docstring>VM UUID, or an empty string to match any VM</tp:docstring>
      </arg>
    </method>
    <method name="policy_set_rule_basic">
      <tp:docstring>Set or create a specific USB rule, a simple interface wrapper around <i>policy_set_rule</i></tp:docstring>
      <arg name="rule_id" type="i" direction="in">
        <tp:docstring>ID of the rule. If a rule exists with the ID, it will be replaced.</tp:docstring>
      </arg>
      <arg name="command" type="s" direction="in">
        <tp:docstring>Command string of {allow, always, default, deny}</tp:docstring>
      </arg>
      <arg name="description" type="s" direction="in">
        <tp:docstring>Description of the policy rule</tp:docstring>
      </arg>
      <arg name="vendor_id" type="s" direction="in">
        <tp:docstring>USB vendor ID as headecimal, parsed by strtol (e.g. 8086)</tp:docstring>
      </arg>
      <arg name="device_id" type="s" direction="in">
        <tp:docstring>USB product ID as hexadecimal, parsed by strtol (e.g. 1a2c)</tp:docstring>
      </arg>
      <arg name="serial_number" type="s" direction="in">
        <tp:docstring>Serial number of the device, or an empty string to match any</tp:docstring>
      </arg>
      <arg name="vm_uuid" type="s" direction="in">
        <tp:docstring>VM UUID, or an empty string to match any VM</tp:docstring>
      </arg>
    </method>
    <method name="reload_policy">
      <tp:docstring>Reload the policy rules from the database</tp:docstring>
    </method>
    <method name="set_sticky">
      <tp:docstring>Set or clear the sticky assignment flag for a device.</tp:docstring>
      <arg name="dev_id" type="i" direction="in">
        <tp:docstring>ID of device to alter sticky flag for.</tp:docstring>
      </arg>
      <arg name="sticky" type="i" direction="in">
        <tp:docstring>Set (1), or clear (0) sticky flag.</tp:docstring>
      </arg>
    </method>
    <method name="state">
      <tp:docstring>Dump daemon state, for debugging only.</tp:docstring>
      <arg name="state" type="s" direction="out">
        <tp:docstring>Daemon state in human readable form.</tp:docstring>
      </arg>
    </method>
    <method name="unassign_device">
      <tp:docstring>Unassign a device from a VM.</tp:docstring>
      <arg name="dev_id" type="i" direction="in">
        <tp:docstring>ID of device to unassign.</tp:docstring>
      </arg>
    </method>
    <method name="vm_stopped">
      <tp:docstring>Tell daemon a VM is stopping.</tp:docstring>
      <arg name="dom_id" type="i" direction="in">
        <tp:docstring>ID of stopping VM.</tp:docstring>
      </arg>
    </method>
    <!--~~~~~~~~~~~~~~~~~~~~~~
    ~~~~  DBus Signals    ~~~~
    ~~~~~~~~~~~~~~~~~~~~~~~-->
    <signal name="device_added">
      <tp:docstring>A device was just added to the list</tp:docstring>
      <arg name="dev_id" type="i">
        <tp:docstring>ID of the new device</tp:docstring>
      </arg>
    </signal>
    <signal name="device_info_changed">
      <tp:docstring>Information previously given out regarding device may be out of date, re-query.</tp:docstring>
      <arg name="dev_id" type="i">
        <tp:docstring>ID of device needing re-query.</tp:docstring>
      </arg>
    </signal>
    <signal name="device_rejected">
      <tp:docstring>A USB device has been rejected due to a policy.</tp:docstring>
      <arg name="device_name" type="s">
        <tp:docstring>User-friendly name of device rejected</tp:docstring>
      </arg>
      <arg name="reason" type="s">
        <tp:docstring>Human-readable description of reason for rejection</tp:docstring>
      </arg>
    </signal>
    <signal name="devices_changed">
      <tp:docstring>Device list previously given out may be out of date, re-enumerate.</tp:docstring>
    </signal>
    <signal name="optical_device_detected">
      <tp:docstring>Signal that we have a new optical device and refresh the host model.</tp:docstring>
    </signal>
  </interface>
</node>
