<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0" name="/host">
  <!--~~~~~~~~~~~~~~~~~~~~~~
  ~~~~  DBus Interface  ~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~-->
  <interface name="com.citrix.xenclient.xenmgr.host">
    <!--~~~~~~~~~~~~~~~~~~~~~~
    ~~~~  DBus Methods    ~~~~
    ~~~~~~~~~~~~~~~~~~~~~~~-->
    <method name="assign_cd_device">
      <!--Assign CD device to given VM (or remove assignment if vm param empty)-->
      <arg name="devid" type="s" direction="in"/>
      <arg name="sticky" type="b" direction="in"/>
      <arg name="vm_uuid" type="s" direction="in"/>
    </method>
    <method name="configure_gpu_placement">
      <!--Configures GPU placement for purposes of tracking VM switching when moving the mouse over the monitor edge. 0 = not set.-->
      <arg name="id" type="s" direction="in">
        <!--GPU id-->
      </arg>
      <arg name="slot" type="i" direction="in">
        <!--Slot number, from left to right, in ascending order.-->
      </arg>
    </method>
    <method name="eject_cd_device">
      <!--Physically eject media tray-->
      <arg name="devid" type="s" direction="in"/>
    </method>
    <method name="get_cd_device_assignment">
      <!--Get CD device's assigned VM-->
      <arg name="devid" type="s" direction="in"/>
      <arg name="sticky" type="b" direction="out"/>
      <arg name="vm_uuid" type="s" direction="out"/>
    </method>
    <method name="get_gpu_placement">
      <!--Get the GPU placement slot.-->
      <arg name="id" type="s" direction="in">
        <!--GPU id-->
      </arg>
      <arg name="slot" type="i" direction="out">
        <!--GPU placement slot or 0 if not set.-->
      </arg>
    </method>
    <method name="get_seconds_from_epoch">
      <!--Get number of seconds from epoch.-->
      <arg name="seconds" type="i" direction="out"/>
    </method>
    <method name="get_sound_card_control">
      <!--Set sound card control parameter value-->
      <arg name="card" type="s" direction="in"/>
      <arg name="control" type="s" direction="in"/>
      <arg name="value" type="s" direction="out"/>
    </method>
    <method name="hibernate">
      <!--Send the host into s4 (hibernate).-->
    </method>
    <method name="is_service_running">
      <!--Tests if a named dbus service is currently running.-->
      <arg name="service" type="s" direction="in">
        <!--The name of the service to check for.-->
      </arg>
      <arg name="running" type="b" direction="out">
        <!--Boolean value indicating whether the service is running.-->
      </arg>
    </method>
    <method name="list_capture_devices">
      <!--List audio capture devices on system-->
      <arg name="" type="aa{ss}" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QList&lt;QMap&lt;QString,QString&gt;&gt;"/>
    </method>
    <method name="list_cd_devices">
      <!--List cdrom devices on system-->
      <arg name="" type="aa{ss}" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QList&lt;QMap&lt;QString,QString&gt;&gt;"/>
    </method>
    <method name="list_disk_devices">
      <!--List the disk devices on system.-->
      <arg name="" type="aa{ss}" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QList&lt;QMap&lt;QString,QString&gt;&gt;"/>
    </method>
    <method name="list_gpu_devices">
      <!--Like above, with some logic to filter GPU devices.-->
      <arg name="" type="aa{ss}" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QList&lt;QMap&lt;QString,QString&gt;&gt;"/>
    </method>
    <method name="list_isos">
      <!--List the contents of the CD image (ISO) directory.-->
      <arg name="" type="as" direction="out"/>
    </method>
    <method name="list_pci_devices">
      <!--List the PCI devices on the system. Returns a list of mappings, each including at least the device name, pciclass, vendor and ID.-->
      <arg name="" type="aa{ss}" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QList&lt;QMap&lt;QString,QString&gt;&gt;"/>
    </method>
    <method name="list_playback_devices">
      <!--List audio playback devices on system-->
      <arg name="" type="aa{ss}" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QList&lt;QMap&lt;QString,QString&gt;&gt;"/>
    </method>
    <method name="list_sound_card_controls">
      <!--List controlable parameters of a sound card-->
      <arg name="card" type="s" direction="in"/>
      <arg name="" type="aa{ss}" direction="out"/>
    </method>
    <method name="list_sound_cards">
      <!--List sound cards on system-->
      <arg name="" type="aa{ss}" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QList&lt;QMap&lt;QString,QString&gt;&gt;"/>
    </method>
    <method name="list_ui_plugins">
      <!--List UI plugins on system.-->
      <arg name="subdir" type="s" direction="in"/>
      <arg name="list" type="as" direction="out"/>
    </method>
    <method name="reboot">
      <!--Reboot the host device.-->
    </method>
    <method name="set_license">
      <arg name="expiry_date" type="s" direction="in">
        <!--Expiry date in the format yyyy-mm-dd HH:MM.-->
      </arg>
      <arg name="device_uuid" type="s" direction="in"/>
      <arg name="hash" type="s" direction="in"/>
    </method>
    <method name="set_sound_card_control">
      <!--Set sound card control parameter value-->
      <arg name="card" type="s" direction="in"/>
      <arg name="control" type="s" direction="in"/>
      <arg name="value" type="s" direction="in"/>
    </method>
    <method name="shutdown">
      <!--Shutdown the host device.-->
    </method>
    <method name="shutdown_idle">
      <!--Shutdown the host device. VMs which fail to shutdown gracefully are forced off. Should be called by the power management subsystem after the system has reached the idle timeout.-->
    </method>
    <method name="sleep">
      <!--Send the host into s3 (sleep).-->
    </method>

    <method name="set_displayhandler_gpu">
      <!--Set the gpu that displayhandler should use.-->
      <arg name="gpu" type="s" direction="in"/>
    </method>

    <method name="get_displayhandler_gpu">
      <!--Query xenmgr for the gpu for displayhandler to use.-->
      <arg name="gpu" type="s" direction="out"/>
    </method>

    <method name="list_gpus_for_displayhandler">
      <!--Query xenmgr for all potential gpus for displayhandler.-->
      <arg name="" type="aa{ss}" direction="out"/>
    </method>
    <!--~~~~~~~~~~~~~~~~~~~~~~
    ~~~~  DBus Signals    ~~~~
    ~~~~~~~~~~~~~~~~~~~~~~~-->
    <signal name="license_changed">
      <!--Notify that licensing evaluation has changed.-->
    </signal>

    <signal name="displayhandler_gpu_changed">
      <!--Notify that displayhandler gpu changed.-->
    </signal>

    <signal name="state_changed">
      <!--Notify that the host state has changed (sleeping, hibernating etc).-->
      <arg name="state" type="s"/>
    </signal>
    <signal name="storage_space_low">
      <!--Notify that the user is running out of storage space.-->
      <arg name="percent_free" type="i">
        <!--The percentage of free disk space remaining.-->
      </arg>
    </signal>
    <!--~~~~~~~~~~~~~~~~~~~~~~
    ~~~~  DBus Properties ~~~~
    ~~~~~~~~~~~~~~~~~~~~~~~-->
    <property name="amt-capable" type="b" access="read"/>
    <property name="avail-mem" type="i" access="read">
      <!--Available memory, in megabytes. Can be bigger than free memory, since includes balloonable amount.-->
    </property>
    <property name="bios-revision" type="s" access="read"/>
    <property name="build-info" type="a{ss}" access="read">
      <!--Build number, date and associated information.-->
      <annotation name="org.qtproject.QtDBus.QtTypeName" value="QMap&lt;QString,QString&gt;"/>
    </property>
    <property name="capture-pcm" type="s" access="readwrite">
      <!--PCM device used for audio capture-->
    </property>
    <property name="cpu-count" type="i" access="read"/>
    <property name="eth0-mac" type="s" access="read"/>
    <property name="eth0-model" type="s" access="read"/>
    <property name="free-mem" type="i" access="read">
      <!--Free memory, in megabytes.-->
    </property>
    <property name="free-storage" type="i" access="read"/>
    <property name="is-licensed" type="b" access="read"/>
    <property name="laptop" type="b" access="read"/>
    <property name="measured-boot-enabled" type="b" access="read"/>
    <property name="measured-boot-successful" type="b" access="read"/>
    <property name="model" type="s" access="read"/>
    <property name="physical-cpu-model" type="s" access="read"/>
    <property name="physical-gpu-model" type="s" access="read"/>
    <property name="playback-pcm" type="s" access="readwrite">
      <!--PCM device used for audio playback-->
    </property>
    <property name="safe-graphics" type="b" access="read"/>
    <property name="serial" type="s" access="read"/>
    <property name="state" type="s" access="read"/>
    <property name="system-amt-pt" type="b" access="read"/>
    <property name="total-mem" type="i" access="read">
      <!--Total memory, in megabytes.-->
    </property>
    <property name="total-storage" type="i" access="read"/>
    <property name="ui-ready" type="b" access="readwrite">
      <!--UI please set this when you are ready. State will be stored in xenstore.-->
    </property>
    <property name="vendor" type="s" access="read"/>
    <property name="wireless-mac" type="s" access="read"/>
    <property name="wireless-model" type="s" access="read"/>
  </interface>
  <!--~~~~~~~~~~~~~~~~~~~~~~
  ~~~~  DBus Interface  ~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~-->
  <interface name="com.citrix.xenclient.xenmgr.installer">
    <!--Helpers methods for the OEM installer.-->
    <!--~~~~~~~~~~~~~~~~~~~~~~
    ~~~~  DBus Methods    ~~~~
    ~~~~~~~~~~~~~~~~~~~~~~~-->
    <method name="get_eula">
      <!--Contents of the EULA, or empty string.-->
      <arg name="eula" type="s" direction="out"/>
    </method>
    <method name="get_installstate">
      <!--Get progress of the installation bits.-->
      <arg name="state" type="a{ss}" direction="out"/>
      <annotation name="org.qtproject.QtDBus.QtTypeName.Out0" value="QMap&lt;QString,QString&gt;"/>
    </method>
    <method name="progress_installstate">
      <!--Set progress of the installation bits.-->
      <arg name="action" type="s" direction="in"/>
    </method>
  </interface>
  <!--~~~~~~~~~~~~~~~~~~~~~~
  ~~~~  DBus Interface  ~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~-->
  <interface name="com.citrix.xenclient.xenmgr.powersettings">
    <!--Let host object implement the power settings toggles.-->
    <!--~~~~~~~~~~~~~~~~~~~~~~
    ~~~~  DBus Methods    ~~~~
    ~~~~~~~~~~~~~~~~~~~~~~~-->
    <method name="get_ac_lid_close_action">
      <!--Returns the action to perform when the user closes the laptop lid when the device is attached to a power source.-->
      <arg name="" type="s" direction="out"/>
    </method>
    <method name="get_battery_lid_close_action">
      <!--Returns the action to perform when the user closes the laptop lid when the device is running on battery power.-->
      <arg name="" type="s" direction="out"/>
    </method>
    <method name="set_ac_lid_close_action">
      <!--Sets the action to perform when the user closes the laptop lid when the device is attached to a power source.-->
      <arg name="action" type="s" direction="in"/>
    </method>
    <method name="set_battery_lid_close_action">
      <!--Sets the action to perform when the user closes the laptop lid when the device is running on battery power.-->
      <arg name="action" type="s" direction="in">
      </arg>
    </method>

  </interface>
</node>
